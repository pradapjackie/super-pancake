#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

// ANSI color codes
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const pancakeArt = `
${colors.yellow}🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞${colors.reset}
${colors.yellow}          🥞 Super Pancake Framework 🥞          ${colors.reset}
${colors.yellow}🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞🥞${colors.reset}
`;

async function askQuestion(question, defaultValue = '') {
  const { createInterface } = await import('readline');
  const readline = createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    const prompt = defaultValue 
      ? `${question} ${colors.cyan}(${defaultValue})${colors.reset}: `
      : `${question}: `;
    
    readline.question(prompt, (answer) => {
      readline.close();
      resolve(answer.trim() || defaultValue);
    });
  });
}

async function askYesNo(question, defaultValue = true) {
  const defaultText = defaultValue ? 'Y/n' : 'y/N';
  const answer = await askQuestion(`${question} ${colors.cyan}(${defaultText})${colors.reset}`);
  
  if (!answer) return defaultValue;
  return answer.toLowerCase().startsWith('y');
}

function createPackageJson(projectName, config) {
  return {
    "name": projectName,
    "version": "1.0.0",
    "description": "Super Pancake automation testing project",
    "main": "index.js",
    "scripts": {
      "test": "super-pancake-run",
      "test:ui": "super-pancake-ui",
      "test:server": "super-pancake-server",
      "test:generate": "super-pancake-generate"
    },
    "keywords": ["automation", "testing", "super-pancake", "ui-testing"],
    "author": config.author || "",
    "license": "MIT",
    "dependencies": {
      "super-pancake-automation": "latest"
    },
    "devDependencies": {},
    "engines": {
      "node": ">=16.0.0"
    }
  };
}

function createSuperPancakeConfig(config) {
  return `// Super Pancake Framework Configuration
// Generated by create-super-pancake

export default {
  // Framework settings
  framework: "super-pancake",
  version: "1.0.0",
  
  // Test configuration
  testDir: "${config.testDir || "tests"}",
  
  // Browser settings
  browser: {
    name: "${config.browser || "chrome"}",
    headless: ${config.headless !== false},
    viewport: {
      width: ${parseInt(config.viewportWidth) || 1280},
      height: ${parseInt(config.viewportHeight) || 720}
    }
  },
  
  // Timeout settings (in milliseconds)
  timeouts: {
    testTimeout: ${parseInt(config.timeout) || 30000},
    navigationTimeout: 10000,
    elementTimeout: 5000
  },
  
  // Retry configuration
  retries: ${parseInt(config.retries) || 2},
  
  // Reporter settings
  reporter: {
    html: {
      enabled: true,
      outputFile: "automationTestReport.html"
    },
    console: {
      enabled: true,
      verbose: ${config.verbose === true}
    }
  },
  
  // Base URL for tests (optional)
  baseURL: "${config.baseURL || ""}",
  
  // Test execution settings
  use: {
    trace: "${config.trace === true ? "on-first-retry" : "off"}",
    screenshot: "${config.screenshot || "only-on-failure"}",
    video: "${config.video || "retain-on-failure"}"
  },
  
  // Screenshots settings
  screenshots: {
    enabled: true,
    path: "screenshots",
    onFailure: true
  }
};`;

function createSampleTest(testDir, config) {
  const sampleTest = `// 🥞 Super Pancake Sample Test
// Generated by create-super-pancake

import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { 
  launchChrome, 
  connectToChrome, 
  createSession, 
  enableDOM, 
  querySelector, 
  type, 
  click, 
  waitForElement,
  getText,
  takeElementScreenshot 
} from 'super-pancake-automation';

describe('Sample Super Pancake Test', () => {
  let chrome, ws, session;

  beforeAll(async () => {
    console.log('🥞 Starting Super Pancake test...');
    
    // Launch Chrome browser
    chrome = await launchChrome({ 
      headed: ${!config.headless},
      viewport: { 
        width: ${config.viewportWidth || 1280}, 
        height: ${config.viewportHeight || 720} 
      }
    });
    
    // Connect to Chrome DevTools
    ws = await connectToChrome();
    session = createSession(ws);
    await enableDOM(session);
  });

  afterAll(async () => {
    // Cleanup
    console.log('🧹 Cleaning up test environment...');
    if (ws) ws.close();
    if (chrome) await chrome.kill();
  });

  it('should navigate to example website', async () => {
    // Navigate to a test page
    await session.send('Page.navigate', { 
      url: '${config.baseURL || 'https://example.com'}' 
    });
    
    // Wait for page to load
    await session.send('Page.loadEventFired');
    
    // Take a screenshot
    await takeElementScreenshot(session, 'body', 'homepage.png');
    
    // Find page title
    const titleElement = await querySelector(session, 'h1');
    if (titleElement) {
      const titleText = await getText(session, titleElement);
      console.log('Page title:', titleText);
      expect(titleText).toBeTruthy();
    } else {
      console.log('No h1 element found, checking title tag');
      const title = await session.send('Runtime.evaluate', {
        expression: 'document.title'
      });
      expect(title.result.value).toBeTruthy();
    }
  });

  it('should interact with page elements', async () => {
    // Example of form interaction (if available)
    try {
      const inputElement = await querySelector(session, 'input[type="text"], input[type="email"], input:not([type])');
      if (inputElement) {
        await type(session, inputElement, 'Hello Super Pancake!');
        
        const buttonElement = await querySelector(session, 'button, input[type="submit"]');
        if (buttonElement) {
          await click(session, buttonElement);
          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for response
        }
      }
    } catch (error) {
      console.log('Form interaction not available on this page:', error.message);
    }
    
    // Take final screenshot
    await takeElementScreenshot(session, 'body', 'final-state.png');
    
    // Test passes regardless of form availability
    expect(true).toBe(true);
  });

  it('should validate page elements', async () => {
    // Wait for body element (should always exist)
    const bodyElement = await waitForElement(session, 'body', { timeout: 5000 });
    expect(bodyElement).toBeTruthy();
    
    // Check for common elements
    const elements = await Promise.allSettled([
      querySelector(session, 'header'),
      querySelector(session, 'main'),
      querySelector(session, 'footer'),
      querySelector(session, 'nav'),
      querySelector(session, 'div'),
      querySelector(session, 'p')
    ]);
    
    const foundElements = elements.filter(result => result.status === 'fulfilled' && result.value).length;
    console.log(\`Found \${foundElements} common page elements\`);
    
    // Should find at least body and some other elements
    expect(foundElements).toBeGreaterThan(0);
  });
});
`;

  return sampleTest;
}

function createGitignore() {
  return `# Dependencies
node_modules/
package-lock.json

# Test outputs
test-results/
test-report.html
screenshots/
videos/
traces/
*.png
*.jpg
*.jpeg
*.mp4
*.webm

# Logs
*.log
logs/

# Chrome user data
chrome-user-data/

# Environment files
.env
.env.local

# OS files
.DS_Store
Thumbs.db

# IDE files
.vscode/
.idea/
*.swp
*.swo

# Temporary files
tmp/
temp/
`;
}

function createReadme(projectName, config) {
  return `# ${projectName}

A Super Pancake Framework automation testing project.

## 🚀 Quick Start

### Install dependencies
\`\`\`bash
npm install
\`\`\`

### Run tests
\`\`\`bash
# Run all tests
npm test

# Run with UI
npm run test:ui

# Start test server
npm run test:server

# Generate new test
npm run test:generate
\`\`\`

## 🥞 Super Pancake Commands

### Check version
\`\`\`bash
npx super-pancake --version
\`\`\`

### Available commands
\`\`\`bash
npx super-pancake-ui      # Launch interactive UI
npx super-pancake-server  # Start test server
npx super-pancake-run     # Run tests programmatically
npx super-pancake-generate # Generate test templates
\`\`\`

## 📁 Project Structure

\`\`\`
${projectName}/
├── tests/                 # Test files
│   └── sample.test.js     # Sample test
├── screenshots/           # Test screenshots
├── super-pancake.config.js # Framework configuration
├── package.json
└── README.md
\`\`\`

## ⚙️ Configuration

Edit \`super-pancake.config.js\` to customize:

- **Browser settings**: ${config.browser}, headless: ${config.headless}
- **Viewport**: ${config.viewportWidth}x${config.viewportHeight}
- **Timeouts**: ${config.timeout}ms
- **Retries**: ${config.retries}
- **Base URL**: ${config.baseURL || 'Not set'}
- **Screenshots**: ${config.screenshot}
- **Video recording**: ${config.video}

## 📊 Reports

Test reports are generated automatically:
- **HTML Report**: \`test-report.html\`
- **Console Output**: Real-time test results
- **Screenshots**: Captured on failures or always (configurable)

## 🔗 Resources

- [Super Pancake Documentation](https://github.com/pradapjackie/super-pancake)
- [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/)
- [Testing Best Practices](https://github.com/pradapjackie/super-pancake#best-practices)

## 🤝 Support

For issues and questions:
- [GitHub Issues](https://github.com/pradapjackie/super-pancake/issues)
- [Documentation](https://github.com/pradapjackie/super-pancake#readme)

---
*Generated with 🥞 Super Pancake Framework*
`;
}

async function main() {
  console.clear();
  console.log(pancakeArt);
  console.log(`${colors.bright}Welcome to Super Pancake Framework Setup!${colors.reset}\n`);
  
  // Get project name
  const currentDir = path.basename(process.cwd());
  const projectName = await askQuestion(
    `${colors.bright}Project name${colors.reset}`, 
    currentDir
  );

  console.log(`\n${colors.blue}📋 Let's configure your Super Pancake project...${colors.reset}\n`);

  const config = {};
  
  // Basic configuration
  config.author = await askQuestion(`${colors.bright}Author${colors.reset}`, '');
  config.testDir = await askQuestion(`${colors.bright}Test directory${colors.reset}`, 'tests');
  config.baseURL = await askQuestion(`${colors.bright}Base URL (optional)${colors.reset}`, '');

  // Browser configuration
  console.log(`\n${colors.magenta}🌐 Browser Configuration${colors.reset}`);
  const browsers = ['chrome', 'chromium', 'edge'];
  console.log(`Available browsers: ${browsers.join(', ')}`);
  config.browser = await askQuestion(`${colors.bright}Browser${colors.reset}`, 'chrome');
  config.headless = await askYesNo(`${colors.bright}Run headless${colors.reset}`, true);

  // Viewport configuration
  console.log(`\n${colors.cyan}📱 Viewport Configuration${colors.reset}`);
  config.viewportWidth = await askQuestion(`${colors.bright}Viewport width${colors.reset}`, '1280');
  config.viewportHeight = await askQuestion(`${colors.bright}Viewport height${colors.reset}`, '720');

  // Test configuration
  console.log(`\n${colors.green}⚙️ Test Configuration${colors.reset}`);
  config.timeout = await askQuestion(`${colors.bright}Test timeout (ms)${colors.reset}`, '30000');
  config.retries = await askQuestion(`${colors.bright}Test retries${colors.reset}`, '2');

  // Recording configuration
  console.log(`\n${colors.yellow}📸 Recording Configuration${colors.reset}`);
  const screenshotOptions = ['always', 'only-on-failure', 'off'];
  console.log(`Screenshot options: ${screenshotOptions.join(', ')}`);
  config.screenshot = await askQuestion(`${colors.bright}Screenshots${colors.reset}`, 'only-on-failure');
  
  const videoOptions = ['always', 'retain-on-failure', 'off'];
  console.log(`Video options: ${videoOptions.join(', ')}`);
  config.video = await askQuestion(`${colors.bright}Video recording${colors.reset}`, 'retain-on-failure');

  config.trace = await askYesNo(`${colors.bright}Enable tracing${colors.reset}`, false);
  config.verbose = await askYesNo(`${colors.bright}Verbose output${colors.reset}`, false);

  // Sample test
  console.log(`\n${colors.magenta}📝 Sample Test${colors.reset}`);
  const createSample = await askYesNo(`${colors.bright}Create sample test${colors.reset}`, true);

  // Create project structure
  console.log(`\n${colors.blue}🔨 Creating project structure...${colors.reset}\n`);

  try {
    // Create directories
    const testDirPath = path.join(process.cwd(), config.testDir);
    if (!fs.existsSync(testDirPath)) {
      fs.mkdirSync(testDirPath, { recursive: true });
      console.log(`${colors.green}✅ Created directory: ${config.testDir}${colors.reset}`);
    }

    const screenshotDir = path.join(process.cwd(), 'screenshots');
    if (!fs.existsSync(screenshotDir)) {
      fs.mkdirSync(screenshotDir, { recursive: true });
      console.log(`${colors.green}✅ Created directory: screenshots${colors.reset}`);
    }

    // Create package.json
    const packageJson = createPackageJson(projectName, config);
    fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
    console.log(`${colors.green}✅ Created package.json${colors.reset}`);

    // Create super-pancake.config.js
    const configContent = createSuperPancakeConfig(config);
    fs.writeFileSync('super-pancake.config.js', configContent);
    console.log(`${colors.green}✅ Created super-pancake.config.js${colors.reset}`);

    // Create sample test
    if (createSample) {
      const sampleTestPath = path.join(testDirPath, 'sample.test.js');
      fs.writeFileSync(sampleTestPath, createSampleTest(config.testDir, config));
      console.log(`${colors.green}✅ Created sample test: ${path.join(config.testDir, 'sample.test.js')}${colors.reset}`);
    }

    // Create .gitignore
    fs.writeFileSync('.gitignore', createGitignore());
    console.log(`${colors.green}✅ Created .gitignore${colors.reset}`);

    // Create README.md
    fs.writeFileSync('README.md', createReadme(projectName, config));
    console.log(`${colors.green}✅ Created README.md${colors.reset}`);

    // Install dependencies
    console.log(`\n${colors.blue}📦 Installing dependencies...${colors.reset}\n`);
    execSync('npm install', { stdio: 'inherit' });

    // Success message
    console.log(`\n${colors.green}🎉 Super Pancake project created successfully!${colors.reset}\n`);
    
    console.log(`${colors.bright}Next steps:${colors.reset}`);
    console.log(`${colors.cyan}1.${colors.reset} cd ${projectName} ${colors.yellow}(if not already in directory)${colors.reset}`);
    console.log(`${colors.cyan}2.${colors.reset} npm test ${colors.yellow}(run tests)${colors.reset}`);
    console.log(`${colors.cyan}3.${colors.reset} npm run test:ui ${colors.yellow}(open interactive UI)${colors.reset}`);
    console.log(`${colors.cyan}4.${colors.reset} npx super-pancake --version ${colors.yellow}(check version)${colors.reset}`);
    
    console.log(`\n${colors.bright}Useful commands:${colors.reset}`);
    console.log(`${colors.cyan}•${colors.reset} npx super-pancake-ui ${colors.yellow}(launch UI)${colors.reset}`);
    console.log(`${colors.cyan}•${colors.reset} npx super-pancake-server ${colors.yellow}(start server)${colors.reset}`);
    console.log(`${colors.cyan}•${colors.reset} npx super-pancake-generate ${colors.yellow}(generate tests)${colors.reset}`);
    
    console.log(`\n${pancakeArt}`);
    console.log(`${colors.green}Happy testing with Super Pancake! 🥞${colors.reset}\n`);

  } catch (error) {
    console.error(`\n${colors.red}❌ Error creating project:${colors.reset}`, error.message);
    process.exit(1);
  }
}

// Run main function when executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}