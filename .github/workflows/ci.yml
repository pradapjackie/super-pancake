name: 🥞 Super Pancake Framework CI/CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: 📦 Install dependencies
      run: npm install
      
    - name: 🔍 Run linting (if available)
      run: |
        if npm run lint --silent 2>/dev/null; then
          npm run lint
        else
          echo "No lint script found, skipping..."
        fi
      continue-on-error: false
      
    - name: 🧪 Run all tests
      run: npm run test:all-no-server
      env:
        NODE_ENV: test
        CI: true
        
    - name: 📊 Generate test report
      run: npm run test:report
      if: always()
      
    - name: 📋 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          test-report.html
          TEST_REPORT.md
          automationTestReport.html
        retention-days: 30
        
    - name: 📈 Comment test results on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          
          try {
            const reportPath = 'TEST_REPORT.md';
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🧪 Test Results (Node.js ${{ matrix.node-version }})
                
${report}

[📊 View detailed HTML report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
            }
          } catch (error) {
            console.log('Could not post test results:', error.message);
          }

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: 📦 Install dependencies
      run: npm install
      
    - name: 🔍 Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true

  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: 📦 Install dependencies
      run: npm install
      
    - name: 🏗️ Build package (if build script exists)
      run: |
        if npm run build --silent 2>/dev/null; then
          npm run build
        else
          echo "No build script found, skipping..."
        fi
        
    - name: 📦 Create package
      run: npm pack
      
    - name: 📋 Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: npm-package
        path: "*.tgz"
        retention-days: 30

  publish:
    name: 🚀 Publish Package
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        registry-url: 'https://registry.npmjs.org'
        
    - name: 📦 Install dependencies
      run: npm install
      
    - name: 🧪 Final test run before publish
      run: npm run test:all-no-server
      env:
        NODE_ENV: production
        CI: true
        
    - name: 🏷️ Check if version changed
      id: version-check
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        PUBLISHED_VERSION=$(npm view . version 2>/dev/null || echo "0.0.0")
        
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "published-version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        
        if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          echo "should-publish=true" >> $GITHUB_OUTPUT
          echo "✅ Version changed from $PUBLISHED_VERSION to $CURRENT_VERSION - will publish"
        else
          echo "should-publish=false" >> $GITHUB_OUTPUT
          echo "ℹ️ Version unchanged ($CURRENT_VERSION) - skipping publish"
        fi
        
    - name: 🚀 Publish to npm
      if: steps.version-check.outputs.should-publish == 'true'
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: 🏷️ Create GitHub release
      if: steps.version-check.outputs.should-publish == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version-check.outputs.current-version }}
        release_name: "🥞 Super Pancake Framework v${{ steps.version-check.outputs.current-version }}"
        body: |
          ## 🚀 Release v${{ steps.version-check.outputs.current-version }}
          
          This release includes comprehensive testing coverage:
          - ✅ 156 individual tests across 8 test suites
          - 🔒 Security validation and input sanitization
          - ⚡ Performance and caching optimizations
          - 🎛️ Configuration management
          - 📊 Detailed HTML test reporting
          
          ### 📊 Test Coverage
          - Unit Tests: Core DOM functions and browser integration
          - Integration Tests: UI server and API endpoints  
          - Security Tests: Input validation and secure execution
          - Performance Tests: Query caching and memory management
          - Configuration Tests: Environment-aware settings
          - Error Handling: Graceful failure scenarios
          
          [📋 View Test Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        draft: false
        prerelease: false

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [test, build, publish]
    if: always()
    
    steps:
    - name: 📊 Report workflow status
      run: |
        echo "## 🏁 Workflow Summary"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Publish: ${{ needs.publish.result }}"
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ All tests passed successfully"
        else
          echo "❌ Tests failed - check logs for details"
          exit 1
        fi