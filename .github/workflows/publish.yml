name: 🚀 Publish Package

on:
  push:
    branches: [ main ]
    paths: 
      - 'package.json'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even if version unchanged'
        required: false
        default: false
        type: boolean
      version_type:
        description: 'Version increment type (manual mode)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  verify-tests:
    name: 🧪 Verify Tests Before Publish
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: 📦 Install dependencies
      run: npm install
      
    - name: 🧪 Run comprehensive test suite
      run: npm run test:all-no-server
      env:
        NODE_ENV: production
        CI: true
        
    - name: 📊 Generate final test report
      run: npm run test:report
      
    - name: 📋 Upload pre-publish test results
      uses: actions/upload-artifact@v4
      with:
        name: pre-publish-test-results
        path: |
          test-report.html
          TEST_REPORT.md
        retention-days: 90

  check-version:
    name: 🏷️ Check Version
    runs-on: ubuntu-latest
    needs: verify-tests
    outputs:
      should-publish: ${{ steps.version.outputs.should-publish }}
      current-version: ${{ steps.version.outputs.current-version }}
      published-version: ${{ steps.version.outputs.published-version }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        registry-url: 'https://registry.npmjs.org'
        
    - name: 🏷️ Compare versions
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        
        # Try to get published version, default to 0.0.0 if not published
        PUBLISHED_VERSION=$(npm view "$PACKAGE_NAME" version 2>/dev/null || echo "0.0.0")
        
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "published-version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        echo "package-name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        
        echo "📦 Package: $PACKAGE_NAME"
        echo "📋 Current version: $CURRENT_VERSION"
        echo "🔄 Published version: $PUBLISHED_VERSION"
        
        # Check if we should publish
        FORCE_PUBLISH="${{ github.event.inputs.force_publish }}"
        
        if [ "$FORCE_PUBLISH" = "true" ]; then
          echo "should-publish=true" >> $GITHUB_OUTPUT
          echo "🚀 Force publish requested"
        elif [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          echo "should-publish=true" >> $GITHUB_OUTPUT
          echo "✅ Version changed - will publish"
        else
          echo "should-publish=false" >> $GITHUB_OUTPUT
          echo "ℹ️ Version unchanged - skipping publish"
        fi

  publish:
    name: 🚀 Publish to NPM
    runs-on: ubuntu-latest
    needs: [verify-tests, check-version]
    if: needs.check-version.outputs.should-publish == 'true'
    environment: 
      name: production
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        registry-url: 'https://registry.npmjs.org'
        
    - name: 📦 Install dependencies
      run: npm install
      
    - name: 🧪 Final test run
      run: npm run test:all-no-server
      env:
        NODE_ENV: production
        CI: true
        
    - name: 🔍 Verify package contents
      run: |
        echo "📋 Package contents:"
        npm pack --dry-run
        
    - name: 🚀 Publish to NPM
      run: |
        echo "🚀 Publishing v${{ needs.check-version.outputs.current-version }}..."
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [verify-tests, check-version, publish]
    if: needs.publish.result == 'success'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📊 Download test report
      uses: actions/download-artifact@v4
      with:
        name: pre-publish-test-results
        
    - name: 🏷️ Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version.outputs.current-version }}
        name: "🥞 v${{ needs.check-version.outputs.current-version }}"
        body: |
          ## 🚀 Super Pancake Framework v${{ needs.check-version.outputs.current-version }}

          This release has been automatically published after comprehensive testing.

          ### ✅ Test Coverage Summary
          - 🧪 156 individual tests across 8 test suites
          - 🔒 Security validation and input sanitization  
          - ⚡ Performance and caching optimizations
          - 🎛️ Configuration management
          - 📊 HTML test reporting
          - 🌐 Cross-platform compatibility (Node.js 18.x, 20.x)

          ### 📦 Installation
          ```bash
          npm install super-pancake-automation-framework
          ```

          ### 🔗 Links
          - 📋 [Test Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - 📚 [Documentation](https://github.com/${{ github.repository }}#readme)
          - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)

          ---
          *This release was automatically created by GitHub Actions after all tests passed.*
        draft: false
        prerelease: false

  notify-success:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [verify-tests, check-version, publish, create-release]
    if: always() && needs.publish.result == 'success'
    
    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 Successfully published Super Pancake Framework!"
        echo "📦 Version: ${{ needs.check-version.outputs.current-version }}"
        echo "🔗 NPM: https://www.npmjs.com/package/super-pancake-automation-framework"
        echo "🏷️ Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.check-version.outputs.current-version }}"
